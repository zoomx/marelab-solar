#!/bin/bash 
#marelab aqua 
#installation script
VERSION = 1.0
MARELAB_REPO = "https://code.google.com/p/marelab-solar"
PI_REPO      = "/marelab-aqua-pi"

echo $MARELAB_REPO


_pre_install(){
echo "######## marelab aqua install version: $VERSION ####"
echo "######## Pre installation ####"
 apt-get install boa
 apt-get install lua5.2
 apt-get install git
 #change boa config for marelab depends
 mkdir marelab-aqua
 cd marelab-aqua
 mkdir marelab-web
 mkdir marelab-bin
 mkdir marelab-conf
 mkdir marelab-plugins
 # BASE STRUCTURE IS THERE
}

# Detect package type from /etc/issue
_found_arch() {
  local _ostype="$1"
  shift
  grep -qis "$*" /etc/issue && _OSTYPE="$_ostype"
}

# Detect package type
_OSTYPE_detect() {
  _found_arch PACMAN "Arch Linux" && return
  _found_arch DPKG   "Debian GNU/Linux" && return
  _found_arch DPKG   "Ubuntu" && return
  _found_arch YUM    "CentOS" && return
  _found_arch YUM    "Red Hat" && return
  _found_arch YUM    "Fedora" && return
  _found_arch ZYPPER "SUSE" && return

  [[ -z "$_OSTYPE" ]] || return

  # See also https://github.com/icy/pacapt/pull/22
  # Please not that $OSTYPE (which is `linux-gnu` on Linux system)
  # is not our $_OSTYPE. The choice is not very good because
  # a typo can just break the logic of the program.
  if [[ "$OSTYPE" != "darwin"* ]]; then
    _error "Can't detect OS type from /etc/issue. Running fallback method."
  fi
  [[ -x "/usr/bin/pacman" ]]           && _OSTYPE="PACMAN" && return
  [[ -x "/usr/bin/apt-get" ]]          && _OSTYPE="DPKG" && return
  [[ -x "/usr/bin/yum" ]]              && _OSTYPE="YUM" && return
  [[ -x "/opt/local/bin/port" ]]       && _OSTYPE="MACPORTS" && return
  command -v brew >/dev/null           && _OSTYPE="HOMEBREW" && return
  [[ -x "/usr/bin/emerge" ]]           && _OSTYPE="PORTAGE" && return
  [[ -x "/usr/bin/zypper" ]]           && _OSTYPE="ZYPPER" && return
  if [[ -z "$_OSTYPE" ]]; then
    _error "No supported package manager installed on system"
    _error "(supported: apt, homebrew, pacman, portage, yum)"
    exit 1
  fi
}

_testdir(){
#Does this directory exist?
TEST_DIR=/opt/myperl
if [ -d "$TEST_DIR" ]; then
    echo $TEST_DIR already exists. Exiting!
    exit
fi
}

_testfile(){
#Does file exist?
    PERL_SOURCE_ZIP_FILE=perl-5.18.1.tar.gz
    if [ ! -f "$PERL_SOURCE_ZIP_FILE" ]; then
        wget http://www.cpan.org/src/5.0/$PERL_SOURCE_ZIP_FILE
    fi
}

_isvarempty(){
#Is variable empty?
X=abc
echo "$X"
if [ "$X" == "" ]; then
    echo yes
fi
}
